{"version":3,"sources":["logo.svg","components/TodoItem.jsx","components/Todos.jsx","components/layout/Header.jsx","components/AddTodo.jsx","pages/About.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","btnStyle","color","border","borderRadius","cursor","float","this","id","title","style","type","onChange","markComplete","bind","onClick","deleteTodo","Component","Todos","todos","map","key","headerStyle","textAlign","Header","to","AddTodo","state","onChangeTxt","e","setState","target","value","preventDefault","onSubmit","display","name","placeholder","flex","className","About","Fragment","App","filter","submitTodo","axios","post","then","res","data","fetch","json","result","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.53813a20.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class TodoItem extends Component {\r\n  getStyle = () => {\r\n    return {\r\n      background: \"#f4f4f4\",\r\n      padding: \"10px\",\r\n      borderBottom: \"1px #ccc dotted\",\r\n      textDecoration: this.props.todo.completed ? \"line-through\" : \"none\"\r\n    };\r\n  };\r\n\r\n  btnStyle = () => {\r\n    return {\r\n      background: \"#ff0000\",\r\n      color: \"#fff\",\r\n      border: \"none\",\r\n      padding: \"5px 8px\",\r\n      borderRadius: \"50%\",\r\n      cursor: \"pointer\",\r\n      float: \"right\"\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const { id, title } = this.props.todo;\r\n    return (\r\n      <div style={this.getStyle()}>\r\n        <p>\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={this.props.markComplete.bind(this, id)}\r\n          />{\" \"}\r\n          {title}\r\n          <button\r\n            style={this.btnStyle()}\r\n            onClick={this.props.deleteTodo.bind(this, id)}\r\n          >\r\n            X\r\n          </button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired\r\n};\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nclass Todos extends Component {\r\n  render() {\r\n    return this.props.todos.map(todo => (\r\n      <TodoItem\r\n        key={todo.id}\r\n        todo={todo}\r\n        deleteTodo={this.props.deleteTodo}\r\n        markComplete={this.props.markComplete}\r\n      />\r\n    ));\r\n  }\r\n}\r\n\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  markComplete: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Todos;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <h1 style={headerStyle}>Todo List</h1>\r\n      <Link to=\"/\">Home</Link> | <Link to=\"/about\">About</Link>\r\n    </header>\r\n  );\r\n}\r\n\r\nconst linkStyle = {\r\n  color: \"white\"\r\n};\r\n\r\nconst headerStyle = {\r\n  background: \"#333\",\r\n  color: \"#fff\",\r\n  textAlign: \"center\",\r\n  padding: \"10px\"\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class AddTodo extends Component {\r\n  state = {\r\n    title: \"\"\r\n  };\r\n\r\n  //changing title in the state\r\n  onChangeTxt = e => this.setState({ title: e.target.value });\r\n\r\n  //submitting a todo\r\n  AddTodo = e => {\r\n    e.preventDefault();\r\n    this.props.AddTodo(this.state.title);\r\n    this.setState({ title: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.AddTodo} style={{ display: \"flex\" }}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"title\"\r\n          placeholder=\"Add Todo....\"\r\n          style={{ flex: \"10\", padding: \"5px\" }}\r\n          value={this.state.title}\r\n          onChange={this.onChangeTxt}\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Submit\"\r\n          className=\"btn\"\r\n          style={{ flex: \"1\" }}\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from \"react\";\r\n\r\nfunction About() {\r\n  return (\r\n    <React.Fragment>\r\n      <h1>About</h1>\r\n      <p>This is About page of our Todo list app</p>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Todos from \"./components/Todos\";\nimport Header from \"./components/layout/Header\";\nimport AddTodo from \"./components/AddTodo\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport About from \"./pages/About\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  state = {\n    todos: []\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/todos?_limit=12\")\n      .then(res => res.json())\n      .then(result => {\n        this.setState({\n          todos: result\n        });\n      });\n  }\n  //mark todo as complete by toggling it\n  markComplete = id => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })\n    });\n  };\n\n  //delete todo\n  deleteTodo = id => {\n    this.setState({\n      todos: [...this.state.todos.filter(todo => todo.id != id)]\n    });\n  };\n\n  //adding a new todo\n  submitTodo = title => {\n    axios\n      .post(\"https://jsonplaceholder.typicode.com/todos\", {\n        title: title,\n        completed: false\n      })\n      .then(res => this.setState({ todos: [...this.state.todos, res.data] }));\n\n    // if (title != \"\") {\n    //   let max_id = 0;\n    //   for (var i = 0; i < this.state.todos.length; i++) {\n    //     if (this.state.todos[i].id > max_id) {\n    //       max_id = this.state.todos[i].id;\n    //     }\n    //   }\n    //   const newTodo = {\n    //     id: max_id + 1,\n    //     title: title,\n    //     isCompleted: false\n    //   };\n    // }\n  };\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route\n              exact\n              path=\"/\"\n              render={props => (\n                <React.Fragment>\n                  <AddTodo AddTodo={this.submitTodo} />\n                  <Todos\n                    todos={this.state.todos}\n                    markComplete={this.markComplete}\n                    deleteTodo={this.deleteTodo}\n                  />\n                </React.Fragment>\n              )}\n            />\n            <Route path=\"/about\" component={About} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}